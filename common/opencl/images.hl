/*****************************************************************************
 * downsample.cl: h264 encoder library (OpenCL pyramidal motion estimation)
 *****************************************************************************
 * Copyright (C) 2009 x264 project
 *
 * Authors: David Conrad <lessen42@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02111, USA.
 *****************************************************************************/

#ifndef X264_IMAGES_HL
#define X264_IMAGES_HL

CLPP_IF_IMAGE_SUPPORT

typedef __read_only image2d_t x264_image_t;

constant sampler_t s = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP_TO_EDGE | CLK_FILTER_NEAREST;

inline uint x264_read_image( x264_image_t pix, x264_kernel_param_t param, int2 coord )
{
    return read_imageui( pix, s, coord ).s0;
}

CLPP_ELSE

typedef __global uchar* x264_image_t;

inline uint x264_read_image( x264_image_t pix, x264_kernel_param_t param, int2 coord )
{
    /* Clamp out of range vaules to edges */
    coord = min( max( coord, (int2)(0) ), (param.size - (int2)(1)) );

    return pix[coord.x + coord.y * param.stride];
}

CLPP_ENDIF

#endif /* X264_IMAGES_HL */
